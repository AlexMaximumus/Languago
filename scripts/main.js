let testQuestions = null;
let currentQuestionIndex = 0;
let correctAnswers = 0;

async function loadTest() {
    try {
        const response = await fetch('data/test.json');
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status}`);
        }
        const data = await response.json();
        testQuestions = data.basic.questions;
        startTest();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        document.getElementById('test-start').innerHTML = `
            <div style="text-align: center; color: var(--tg-theme-hint-color);">
                <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞</p>
                <button onclick="loadTest()" class="nav-button">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>
        `;
    }
}

function startTest() {
    currentQuestionIndex = 0;
    correctAnswers = 0;
    document.getElementById('test-start').style.display = 'none';
    document.getElementById('test-questions').style.display = 'block';
    showQuestion();
}

function showQuestion() {
    const question = testQuestions[currentQuestionIndex];
    const container = document.getElementById('test-questions');
    
    container.querySelector('.kanji').textContent = question.question;
    container.querySelector('.furigana').textContent = question.furigana;
    
    const optionsContainer = container.querySelector('.options-container');
    optionsContainer.innerHTML = '';
    
    question.options.forEach((option, index) => {
        const button = document.createElement('button');
        button.className = 'option-button';
        button.textContent = option;
        button.onclick = () => checkAnswer(index, button);
        optionsContainer.appendChild(button);
    });

    container.querySelector('.test-progress').textContent = 
        `–í–æ–ø—Ä–æ—Å ${currentQuestionIndex + 1} –∏–∑ ${testQuestions.length}`;
}

function checkAnswer(selectedIndex, button) {
    const question = testQuestions[currentQuestionIndex];
    const buttons = document.querySelectorAll('.option-button');
    
    buttons.forEach(btn => btn.disabled = true);
    
    if (selectedIndex === question.correct) {
        button.classList.add('correct');
        correctAnswers++;
    } else {
        button.classList.add('wrong');
        buttons[question.correct].classList.add('correct');
    }

    setTimeout(() => {
        currentQuestionIndex++;
        if (currentQuestionIndex < testQuestions.length) {
            showQuestion();
        } else {
            showResults();
        }
    }, 1500);
}

function showResults() {
    document.getElementById('test-questions').style.display = 'none';
    document.getElementById('test-results').style.display = 'block';
    
    const percentage = (correctAnswers / testQuestions.length) * 100;
    let message = '';
    let icon = '';
    
    if (percentage === 100) {
        message = '–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!';
        icon = 'üéâ';
    } else if (percentage >= 80) {
        message = '–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!';
        icon = 'üåü';
    } else if (percentage >= 60) {
        message = '–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!';
        icon = 'üëç';
    } else {
        message = '–°—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª';
        icon = 'üìö';
    }

    document.querySelector('.results-icon').textContent = icon;
    document.querySelector('.score-container').innerHTML = `
        <p>${message}</p>
        <p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${correctAnswers} –∏–∑ ${testQuestions.length}</p>
        <p>–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${percentage}%</p>
    `;
}

function restartTest() {
    document.getElementById('test-results').style.display = 'none';
    startTest();
}
